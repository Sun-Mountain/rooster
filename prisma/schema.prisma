generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum Role {
  USER
  BETA
  COACH
  ADMIN
  SUPER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Hour {
  HOUR_0
  HOUR_1
  HOUR_2
  HOUR_3
  HOUR_4
  HOUR_5
  HOUR_6
  HOUR_7
  HOUR_8
  HOUR_9
  HOUR_10
  HOUR_11
  HOUR_12
  HOUR_13
  HOUR_14
  HOUR_15
  HOUR_16
  HOUR_17
  HOUR_18
  HOUR_19
  HOUR_20
  HOUR_21
  HOUR_22
  HOUR_23
}

enum Minute {
  MINUTE_0
  MINUTE_15
  MINUTE_30
  MINUTE_45
}

model Address {
  id        String   @id @default(cuid())
  userId    String   @unique
  label     String?
  street1   String
  street2   String?
  city      String
  state     String
  zip       String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id           String       @id @default(cuid())
  userId       String       @unique
  firstName    String
  lastName     String
  relationship String
  phoneNumber  PhoneNumber?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhoneNumber {
  id         String   @id @default(cuid())
  userId     String?  @unique
  contactId  String?  @unique
  areaCode   String
  numberGrp1 String
  numberGrp2 String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emergencyContact EmergencyContact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  email            String            @unique
  password         String
  accountStatus    AccountStatus     @default(ACTIVE)
  address          Address?
  phoneNumber      PhoneNumber?
  emergencyContact EmergencyContact?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}
